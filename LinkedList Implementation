#include <iostream>
using namespace std;

// Node structure for the linked list
struct Node {
    int row, col, value;
    Node* next;
    Node(int r, int c, int v) : row(r), col(c), value(v), next(nullptr) {}
};

int main() {
    int numRows, numCols;

    // Get the number of rows and columns from the user
    cout << "Enter the number of rows in the sparse matrix: ";
    cin >> numRows;
    cout << "Enter the number of columns in the sparse matrix: ";
    cin >> numCols;

    int sparseMatrix[numRows][numCols];

    // Get the elements of the sparse matrix from the user
    cout << "Enter the elements of the sparse matrix:" << endl;
    for (int i = 0; i < numRows; i++) {
        for (int j = 0; j < numCols; j++) {
            cin >> sparseMatrix[i][j];
        }
    }

    Node* head = nullptr;
    Node* current = nullptr;

    // Create a linked list to store non-zero elements
    for (int i = 0; i < numRows; i++) {
        for (int j = 0; j < numCols; j++) {
            if (sparseMatrix[i][j] != 0) {
                if (head == nullptr) {
                    head = new Node(i, j, sparseMatrix[i][j]);
                    current = head;
                } else {
                    current->next = new Node(i, j, sparseMatrix[i][j]);
                    current = current->next;
                }
            }
        }
    }

    // Print the linked list (compact form)
    current = head;
    while (current != nullptr) {
        cout << current->row << " " << current->col << " " << current->value << endl;
        current = current->next;
    }

    // Clean up the memory by deleting the linked list nodes
    while (head != nullptr) {
        current = head;
        head = head->next;
        delete current;
    }

    return 0;
}
